<<<<<<< HEAD
---- memcpy Matches (167 in 41 files) ----
BGFGTrack.cpp (z:\home\wj\cuda-workspace\360pano\src\mov\src):	memcpy(&m_thredParam, &trkThred, sizeof(TRK_THRED));
BGFGTrack.cpp (z:\home\wj\cuda-workspace\360pano\src\mov\src):	memcpy(m_warnTargetBK, m_warnTarget, sizeof(TRK_RECT_INFO)*SAMPLE_NUMBER);
Camera.cpp (z:\home\wj\cuda-workspace\360pano\src\capture):#define MEMCPY memcpy
Camera.cpp (z:\home\wj\cuda-workspace\360pano\src\capture):	//memcpy(dst,src,w*h*2);
Camera.cpp (z:\home\wj\cuda-workspace\360pano\src\capture):			memcpy(pic->imageData,GetDefaultImg(),pic_bytes);
Camera.cpp (z:\home\wj\cuda-workspace\360pano\src\capture):		memcpy(yuv_alpha.data,im.data,im.rows*im.cols*3);*/
Camera.cpp (z:\home\wj\cuda-workspace\360pano\src\capture):		memcpy(yuv_alpha.data,im.data,im.rows*im.cols*3);
Camera.cpp (z:\home\wj\cuda-workspace\360pano\src\capture):				memcpy(yuv_alpha.data,im.data,im.rows*im.cols*4);
Classifydetect.cpp (z:\home\wj\cuda-workspace\360pano\src\detect):	memcpy(&hog_detector[0], sv.ptr(), sv.cols*sizeof(hog_detector[0]));
Comcontrl.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(pObj->recvBuf, pCur, pObj->recvLen);
Comcontrl.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(&mousex,&pInBuf[2],4);
Comcontrl.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(&mousey,&pInBuf[6],4);
Comcontrl.cpp (z:\home\wj\cuda-workspace\360pano\src):						memcpy(Netobj.recvBuf, Netobj.recvBuf+iLen, Netobj.recvLen);
DetectAlg.cpp (z:\home\wj\cuda-workspace\360pano\src\detect):										memcpy(LKRramegray.data,process.data,LKRramegray.cols*LKRramegray.rows*LKRramegray.channels());
DetectAlg.cpp (z:\home\wj\cuda-workspace\360pano\src\detect):			memcpy(dst.data,src.data,dst.cols*dst.rows*dst.channels());
DetectAlg.cpp (z:\home\wj\cuda-workspace\360pano\src\detect):			memcpy(dst.data,src.data,dst.cols*dst.rows*dst.channels());
DetectAlg.cpp (z:\home\wj\cuda-workspace\360pano\src\detect):			memcpy(dst.data,processsrc.data,dst.cols*dst.rows*dst.channels());	
Displayer.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(m_renders[i].transform, m_glmat44fTransDefault, sizeof(float)*16);
Displayer.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(m_renders[i].transform, m_glmat44fTransDefault2, sizeof(float)*16);
Displayer.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(&m_initPrm, pPrm, sizeof(DS_InitPrm));
Displayer.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(m_glmat44fTrans[iPrm], pPrm, sizeof(float)*16);
Displayer.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(m_renders[iPrm].transform , pPrm, sizeof(float)*16);
Displayer.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(m_glmat44fTrans[i], m_glmat44fTransDefault, sizeof(m_glmat44fTransDefault));
GLBatch.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(pVerts[nVertsBuilding], vVertex, sizeof(M3DVector3f));
GLBatch.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(pNormals[nVertsBuilding], vNormal, sizeof(M3DVector3f));
GLBatch.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(pColors[nVertsBuilding], vColor, sizeof(M3DVector4f));
GLBatch.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(pTexCoords[texture], vTexCoord, sizeof(M3DVector2f));
GLFrame.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):            memcpy(m, M, sizeof(float)*16);
GLFrustum.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	   		memcpy(rotMat, vCross, sizeof(float)*3);
GLFrustum.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):		   	memcpy(&rotMat[4], vUp, sizeof(float)*3);
GLFrustum.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):		   	memcpy(&rotMat[8], vForward, sizeof(float)*3);
Glosd.cpp (z:\home\wj\cuda-workspace\360pano\src\osd):	memcpy(Linecolor,osdcolour[color],sizeof(Unicodecolor));
Glosd.cpp (z:\home\wj\cuda-workspace\360pano\src\osd):	memcpy(Unicodecolor,osdcolour[color],sizeof(Unicodecolor));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vVertex[0], vVertex[1], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vNormal[0], vNormal[1], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vTexture[0], vTexture[1], sizeof(M3DVector2f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vVertex[1], vVertex[3], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vNormal[1], vNormal[3], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vTexture[1], vTexture[3], sizeof(M3DVector2f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vVertex[0], vVertex[1], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vNormal[0], vNormal[1], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vTexture[0], vTexture[1], sizeof(M3DVector2f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vVertex[1], vVertex[3], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vNormal[1], vNormal[3], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vTexture[1], vTexture[3], sizeof(M3DVector2f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vVertex[0], vVertex[1], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vNormal[0], vNormal[1], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vTexture[0], vTexture[1], sizeof(M3DVector2f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vVertex[1], vVertex[3], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vNormal[1], vNormal[3], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vTexture[1], vTexture[3], sizeof(M3DVector2f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):				memcpy(vNormal[0], vNormal[1], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):				memcpy(vNormal[2], vNormal[3], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vVertex[0], vVertex[1], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vNormal[0], vNormal[1], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vTexture[0], vTexture[1], sizeof(M3DVector2f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vVertex[1], vVertex[3], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vNormal[1], vNormal[3], sizeof(M3DVector3f));
GLTools.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):			memcpy(vTexture[1], vTexture[3], sizeof(M3DVector2f));
GLTriangleBatch.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):            memcpy(pVerts[nNumVerts], verts[iVertex], sizeof(M3DVector3f));
GLTriangleBatch.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):            memcpy(pNorms[nNumVerts], vNorms[iVertex], sizeof(M3DVector3f));
GLTriangleBatch.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):            memcpy(pTexCoords[nNumVerts], vTexCoords[iVertex], sizeof(M3DVector2f));
Gststream.cpp (z:\home\wj\cuda-workspace\360pano\src\compress)://	memcpy(pData->format,formatgst,sizeof(formatgst));
Gststream.cpp (z:\home\wj\cuda-workspace\360pano\src\compress):		memcpy(bufInfo->virtAddr, pbuffer, datasize);
Gststream.cpp (z:\home\wj\cuda-workspace\360pano\src\compress):		memcpy(bufInfo->virtAddr, pbuffer, datasize);
Gststreamercontrl.cpp (z:\home\wj\cuda-workspace\360pano\src\compress):			memcpy(&tm_set, localtime(&tt_set), sizeof(struct tm));
Gst_interfaces.cpp (z:\home\wj\cuda-workspace\360pano\src\gst):		//memcpy(pPort->sendBuf, pTsk->tskSendBuf.bufInfo[rngId].virtAddr, sendLen);
Gst_interfaces.cpp (z:\home\wj\cuda-workspace\360pano\src\gst):		memcpy(pOut, pPrm, headlen);
Gst_interfaces.cpp (z:\home\wj\cuda-workspace\360pano\src\gst):		memcpy(pOut+headlen, pIn, datalen);
Gyro.cpp (z:\home\wj\cuda-workspace\360pano\src):	memcpy(gyroPrms_out,gyroPrms_in,sizeof(GYRO_PRMS));
Gyroprocess.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(buffdata,&dataptr[width*(height-1)*2+2+40*i],40);
Gyro_calibrate.cpp (z:\home\wj\cuda-workspace\360pano\src):	memcpy(calib_prm_out,calib_prm_in,sizeof(CALIB_PRMS));
Gyro_protocol.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy((void*)gyroHndl->pGyroData,(void*)&gyroHndl->pGyroData[nElem_pos],sizeof(GYRO_DATA_T) * nElem_remain);
Gyro_protocol.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy((void*)gyroHndl->pGyroData,(void*)&gyroHndl->pGyroData[nElem_pos],sizeof(GYRO_DATA_T) * nElem_remain);
Gyro_quater.cpp (z:\home\wj\cuda-workspace\360pano\src):	memcpy(quat_last,gyroHndl->quat_all,sizeof(quat_last));
Gyro_quater.cpp (z:\home\wj\cuda-workspace\360pano\src):	memcpy(gyroHndl->quat_all,quat_new,sizeof(quat_new));
Gyro_quater.cpp (z:\home\wj\cuda-workspace\360pano\src):	memcpy(pRefQuat, &gyroHndl->pGyroData[refIdx],sizeof(GYRO_DATA_T));
Gyro_quater.cpp (z:\home\wj\cuda-workspace\360pano\src):	memcpy(pRefQuat, &gyroHndl->pGyroData[refIdx],sizeof(GYRO_DATA_T));
HDV4lcap.cpp (z:\home\wj\cuda-workspace\360pano\src\capture):#define MEMCPY memcpy
ImageProcess.cpp (z:\home\wj\cuda-workspace\360pano\src):	memcpy(info->virtAddr,src.data,src.rows*src.cols*src.channels());
ImageProcess.cpp (z:\home\wj\cuda-workspace\360pano\src):		//memcpy(temp.data,src.data,PANO360WIDTH*PANO360HEIGHT*3);
ImageProcess.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(dst.data,src.data,dst.cols*dst.rows*dst.channels());
ImageProcess.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(dst.data,src.data,dst.cols*dst.rows*dst.channels());
ImageProcess.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(dst1.data,src1.data,Config::getinstance()->getpanoprocessheight()*Config::getinstance()->getpanoprocesswidth()*3);
ImageProcess.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(info->virtAddr,infocap->virtAddr,infocap->width*infocap->height*infocap->channels);
ImageProcess.hpp (z:\home\wj\cuda-workspace\360pano\src):		void setpreprocessimage(Mat src){memcpy(ProcessPreimage.data,src.data,ProcessPreimage.cols*ProcessPreimage.rows*ProcessPreimage.channels());};
ImageProcess.hpp (z:\home\wj\cuda-workspace\360pano\src):		void setzeroflame(Mat flame){memcpy(zeroflame.data,flame.data,flame.cols*flame.rows*flame.channels());};
Kalman.cpp (z:\home\wj\cuda-workspace\360pano\src\mov\src):	memcpy(A, B, sizeof(double)*m*n);
Lkdetect.cpp (z:\home\wj\cuda-workspace\360pano\src\lk):				memcpy(backgroundmovmat[chid].data,src.data,src.cols*src.rows*src.channels());
Lkdetect.cpp (z:\home\wj\cuda-workspace\360pano\src\lk):				memcpy(dst.data,src.data,src.cols*src.rows*src.channels());
Lkdetect.cpp (z:\home\wj\cuda-workspace\360pano\src\lk):			memcpy(backgroundmovmat[chid].data,src.data,src.cols*src.rows*src.channels());
Main_pano.cpp (z:\home\wj\cuda-workspace\360pano\src):	memcpy(img.data,framdata,img.cols*img.rows*img.channels());
Main_pano.cpp (z:\home\wj\cuda-workspace\360pano\src):	//memcpy(render.IPocess_bufQue,Imageprocesspt->m_bufQue,sizeof(Imageprocesspt->m_bufQue));
Math3d.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):// used is memcpy (for faster copying of vector arrays).
Math3d.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(m, identity, sizeof(M3DMatrix33f));
Math3d.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(m, identity, sizeof(M3DMatrix33d));
Math3d.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(m, identity, sizeof(M3DMatrix44f));
Math3d.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(m, identity, sizeof(M3DMatrix44d));
Math3d.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(vBack, vPointIn, sizeof(float)*3);
Math3d.cpp (z:\home\wj\cuda-workspace\360pano\src\gltools\src):	memcpy(vBack, vPointIn, sizeof(float)*3);
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):// used is memcpy (for faster copying of vector arrays).
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):inline void	m3dCopyVector2(M3DVector2f dst, const M3DVector2f src) { memcpy(dst, src, sizeof(M3DVector2f)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):inline void	m3dCopyVector2(M3DVector2d dst, const M3DVector2d src) { memcpy(dst, src, sizeof(M3DVector2d)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):inline void	m3dCopyVector3(M3DVector3f dst, const M3DVector3f src) { memcpy(dst, src, sizeof(M3DVector3f)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):inline void	m3dCopyVector3(M3DVector3d dst, const M3DVector3d src) { memcpy(dst, src, sizeof(M3DVector3d)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):inline void	m3dCopyVector4(M3DVector4f dst, const M3DVector4f src) { memcpy(dst, src, sizeof(M3DVector4f)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):inline void	m3dCopyVector4(M3DVector4d dst, const M3DVector4d src) { memcpy(dst, src, sizeof(M3DVector4d)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):// Brain-dead memcpy
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst, src, sizeof(M3DMatrix33f)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst, src, sizeof(M3DMatrix33d)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst, src, sizeof(M3DMatrix44f)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst, src, sizeof(M3DMatrix44d)); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst, src + (3 * column), sizeof(float) * 3); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst, src + (3 * column), sizeof(double) * 3); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst + (3 * column), src, sizeof(float) * 3); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst + (3 * column), src, sizeof(double) * 3); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst, src + (4 * column), sizeof(float) * 4); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst, src + (4 * column), sizeof(double) * 4); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst + (4 * column), src, sizeof(float) * 4); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	{ memcpy(dst + (4 * column), src, sizeof(double) * 4); }
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst, src, sizeof(float) * 3); // X column
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst + 3, src + 4, sizeof(float) * 3); // Y column
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst + 6, src + 8, sizeof(float) * 3); // Z column
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst, src, sizeof(double) * 3); // X column
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst + 3, src + 4, sizeof(double) * 3); // Y column
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst + 6, src + 8, sizeof(double) * 3); // Z column
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst, src, sizeof(float) * 4);
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst + 4, src + 4, sizeof(float) * 4);
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst + 8, src + 8, sizeof(float) * 4);
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst, src, sizeof(double) * 4);
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst + 4, src + 4, sizeof(double) * 4);
Math3d.h (z:\home\wj\cuda-workspace\360pano\src\gltools\include):	memcpy(dst + 8, src + 8, sizeof(double) * 4);
MovDetector.cpp (z:\home\wj\cuda-workspace\360pano\src\mov\src):			memcpy(gray.data+(j - boundRect.y)*gray.cols,src.data+j*src.cols,gray.cols);
Optical_flow_calculator.cpp (z:\home\wj\cuda-workspace\360pano\src\lk):			memcpy(dst.data,gray_image1.data,dst.cols*dst.rows*dst.channels());
Osa_dma.h (z:\home\wj\cuda-workspace\360pano\src\osa_cap\inc):#define OSA_DMA_MODE_NORMAL     0   // normal memcpy or memfill type DMA's
Osa_msgq.cpp (z:\home\wj\cuda-workspace\360pano\src\osa_cap\src):		memcpy(msg,hndl->queue[hndl->curRd],sizeof(OSA_MsgHndl));
Plantformcontrl.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(pObj->recvBuf, pCur, pObj->recvLen);
Plantformcontrl.cpp (z:\home\wj\cuda-workspace\360pano\src):						memcpy(platformcom.recvBuf, platformcom.recvBuf+iLen, platformcom.recvLen);
postDetector.cpp (z:\home\wj\cuda-workspace\360pano\src\mov\src):	memcpy(m_pPatterns, &ptn, sizeof(ptn));
postDetector.cpp (z:\home\wj\cuda-workspace\360pano\src\mov\src):			memcpy(m_pPatterns+m_patternnum , ptn+j, sizeof(Pattern));
postDetector.cpp (z:\home\wj\cuda-workspace\360pano\src\mov\src):		memcpy(&curPattern, &m_pPatterns[irec], sizeof(Pattern));
postDetector.cpp (z:\home\wj\cuda-workspace\360pano\src\mov\src):		memcpy(&curPattern, &m_pPatterns[irec], sizeof(Pattern));
postDetector.cpp (z:\home\wj\cuda-workspace\360pano\src\mov\src):		memcpy(&curPattern, &m_pPatterns[irec], sizeof(Pattern));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(dst.data+i*dst.cols*dst.channels(),src.data+i*src.cols*src.channels(),dst.cols*src.channels());
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(dst.data,src.data,src.rows*dst.cols*src.channels());
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vVerts,vVertsindentify,sizeof(vVerts));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vVertsback,vVertsindentify,sizeof(vVertsback));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vTexselectCoords,vTexCoordsindentify,sizeof(vTexselectCoords));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vTexselectCoordsbak,vTexCoordsindentify,sizeof(vTexselectCoordsbak));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			//memcpy(&viewcamera[index].rectback,)
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			//memcpy(vTexselectCoordsbak,vTexselectCoords,8);
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vVertex[0], vVertex[1], sizeof(M3DVector3f));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vNormal[0], vNormal[1], sizeof(M3DVector3f));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vTexture[0], vTexture[1], sizeof(M3DVector2f));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vVertex[1], vVertex[3], sizeof(M3DVector3f));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vNormal[1], vNormal[3], sizeof(M3DVector3f));
Render.cpp (z:\home\wj\cuda-workspace\360pano\src):			memcpy(vTexture[1], vTexture[3], sizeof(M3DVector2f));
screenCapture.cpp (z:\home\wj\cuda-workspace\360pano\src\gst):					memcpy(pObj->buf, map.data, map.size);
screenCapture.cpp (z:\home\wj\cuda-workspace\360pano\src\gst):	memcpy(pData->format,formatgst,sizeof(formatgst));
screenCapture.cpp (z:\home\wj\cuda-workspace\360pano\src\gst):			memcpy(&tm_set, localtime(&tt_set), sizeof(struct tm));
Stich.cpp (z:\home\wj\cuda-workspace\360pano\src):		memcpy(dstdata+(i+fullflame-1)*width*2*2,srcdata+i*width*2,width*2);
StichAlg.cpp (z:\home\wj\cuda-workspace\360pano\src\stich):		//memcpy(temp.data,src.data,PANO360WIDTH*PANO360HEIGHT*3);
StichAlg.cpp (z:\home\wj\cuda-workspace\360pano\src\stich):		//memcpy(dst.data,src.data,Config::getinstance()->getpanoprocessheight()*Config::getinstance()->getpanoprocesswidth()*3);
StichAlg.hpp (z:\home\wj\cuda-workspace\360pano\src\stich):		void setpreprocessimage(Mat src){memcpy(ProcessPreimage.data,src.data,ProcessPreimage.cols*ProcessPreimage.rows*ProcessPreimage.channels());};
StichAlg.hpp (z:\home\wj\cuda-workspace\360pano\src\stich):		void setzeroflame(Mat flame){memcpy(zeroflame.data,flame.data,flame.cols*flame.rows*flame.channels());};
Videoload.hpp (z:\home\wj\cuda-workspace\360pano\src\record):		void putvideoname(char *name){memcpy(videoname,name,60);};
Videorecord.cpp (z:\home\wj\cuda-workspace\360pano\src\record):	memcpy(&tm_set, localtime(&tt_set), sizeof(struct tm));
=======
---- processFrame_file Matches (2 in 1 files) ----
Main_pano.cpp (z:\home\wj\cuda-workspace\360pano\src):void processFrame_file(void *data,void *angle)
Main_pano.cpp (z:\home\wj\cuda-workspace\360pano\src):			filecapture.registcallback(processFrame_file);
>>>>>>> refs/remotes/eclipse_auto/master
